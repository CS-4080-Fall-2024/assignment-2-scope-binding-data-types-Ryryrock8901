Parse Tree

Statement
└──Assignment
    ├── Identifier ("A")
    ├── =
    └──  Expression
             ├── term
             │   │ ├── term
             │   │      └── Identifier ("B")
             │   └── *
             │ 
             └── Factor
                    ├── (
                    ├── Expression
                         ├── term
                         │   │ ├── term
                         │   │      └── Identifier ("C")
                         │   │
                         │   └── *
                         └── Factor
                                 ├── Expression
                                         ├── term
                                         │     └── Identifier ("A")
                                         └── +
                                         │
                                         └── term
                                                 └── Identifier ("B")

LeftMost Derivation

1. Statement
   ⇒ Assignment
2. Assignment
   ⇒ Identifier = Expression
3. Identifier
   ⇒ A
4. A = Expression
   ⇒ A = Term
5. A = Term
   ⇒ A = Term * Factor
6. A = Term * Factor
   ⇒ A = Identifier * Factor
7. A = Identifier * Factor
   ⇒ A = B * Factor
8. A = B * Factor
   ⇒ A = B * ( Expression )
9. A = B * ( Expression )
   ⇒ A = B * ( Term )
10. A = B * ( Term )
    ⇒ A = Term * Factor
11. A = B * ( Term * Factor )
    ⇒ A = Identifier * Factor
12. A = B * ( Identifier * Factor )
    ⇒ A = B * ( C * Factor )
13. A = B * ( C * Factor )
    ⇒ A = B * ( C * ( Expression ) )
14. A = B * ( C * ( Expression ) )
    ⇒ A = B * ( C * ( Expression + Term ) )
15. A = B * ( C * ( Expression + Term ) )
    ⇒ A = B * ( C * ( Identifier + Term ) )
16. A = B * ( C * ( Identifier + Term ) )
    ⇒ A = B * ( C * ( A + Term ) )
17. A = B * ( C * ( A + Term ) )
    ⇒ A = B * ( C * ( A + Identifier ) )
18. A = B * ( C * ( A + Identifier ) )
    ⇒ A = B * ( C * ( A + B ) )

2a. 180

2B. 126

2C. 97 since u is 13 because we use proc bar, int u = w which is 13. Since shallow binding 